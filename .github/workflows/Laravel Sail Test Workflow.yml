name: Pipeline

on: push

jobs:
  docker:
    name: Build and test app
    runs-on: ubuntu-20.04
    env:
      APP_NAME: ${{ secrets.APP_NAME }}
      APP_ENV: ${{ secrets.APP_ENV }}
      APP_KEY: ${{ secrets.APP_KEY }}
      APP_DEBUG: ${{ secrets.APP_DEBUG }}
      APP_URL: ${{ secrets.APP_URL }}
      LOG_CHANNEL: ${{ secrets.LOG_CHANNEL }}
      LOG_DEPRECATIONS_CHANNEL: ${{ secrets.LOG_DEPRECATIONS_CHANNEL }}
      LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
      DB_CONNECTION: pgsql
      DB_HOST: 172.21.73.3
      DB_PORT: 5432
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
      WEBAPP_REDIRECT_URI: ${{ secrets.WEBAPP_REDIRECT_URI }}
      REDIRECTED_URL_MAIL: ${{ secrets.REDIRECTED_URL_MAIL }}
      MAIL_MAILER: ${{ secrets.MAIL_MAILER }}
      MAIL_HOST: ${{ secrets.MAIL_HOST }}
      MAIL_PORT: ${{ secrets.MAIL_PORT }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      MAIL_ENCRYPTION: ${{ secrets.MAIL_ENCRYPTION }}
      MAIL_FROM_ADDRESS: ${{ secrets.MAIL_FROM_ADDRESS }}
      MAIL_FROM_NAME: ${{ secrets.MAIL_FROM_NAME }}
#      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#      AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
#      AWS_USE_PATH_STYLE_ENDPOINT: ${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}
#      PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
#      PUSHER_APP_KEY: ${{ secrets.PUSHER_APP_KEY }}
#      PUSHER_APP_SECRET: ${{ secrets.PUSHER_APP_SECRET }}
#      PUSHER_HOST: ${{ secrets.PUSHER_HOST }}
#      PUSHER_PORT: ${{ secrets.PUSHER_PORT }}
#      PUSHER_SCHEME: ${{ secrets.PUSHER_SCHEME }}
#      PUSHER_APP_CLUSTER: ${{ secrets.PUSHER_APP_CLUSTER }}
#      VITE_PUSHER_APP_KEY: ${{ secrets.VITE_PUSHER_APP_KEY }}
#      VITE_PUSHER_HOST: ${{ secrets.VITE_PUSHER_HOST }}
#      VITE_PUSHER_PORT: ${{ secrets.VITE_PUSHER_PORT }}
#      VITE_PUSHER_SCHEME: ${{ secrets.VITE_PUSHER_SCHEME }}
#      VITE_PUSHER_APP_CLUSTER: ${{ secrets.VITE_PUSHER_APP_CLUSTER }}
      SCOUT_DRIVER: ${{ secrets.SCOUT_DRIVER }}
      MEILISEARCH_HOST: ${{ secrets.MEILISEARCH_HOST }}
      WWWGROUP: ${{ secrets.WWWGROUP }}
      WWWUSER: ${{ secrets.WWWUSER }}

    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2

      - name: "☁️ install docker"
        run: |
          sudo apt install apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu `lsb_release -cs` test"

          sudo apt-get install \
            ca-certificates \
            curl \
            gnupg
          sudo apt install docker-ce docker-ce-cli containerd.io

      - name: "☁️ Setup php"
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, curl, pgsql, pdo-pgsql, dom, xml
          ini-values: post_max_size=256M, max_execution_time=180
          coverage: xdebug
          tools: php-cs-fixer, phpunit

      - name: "☁️ Setup composer"
        uses: php-actions/composer@v6
        with:
          php_version: "8.2"

      - name: "Composer install"
        run: sudo composer install

      - name: "Test fix"
        run: |
          php artisan clear-compiled
          composer dump-autoload
          php artisan optimize
          php artisan cache:clear
          php artisan config:cache

      - name: "Launch Database"
        run: sudo docker compose up -d postgresql

      - name: "ifconfig"
        run: ifconfig -a

      - name: "get interface variable"
        run: "dockerComposeInterface=$(ip addr | grep -B2 'inet 172.21.0.1' | awk '/^[0-9]: / {print $2}')"

      - name: "remove : of interface variable"
        run: "dockerComposeInterface=$(echo $dockerComposeInterface | sed 's/.$//')"

      - name: "Add route to docker"
        run: "sudo ip route replace 172.21.0.0/16 dev $dockerComposeInterface"

      - name: "ping"
        run: ping -c 4 $DB_HOST

      - name: "telnet"
        run: telnet $DB_HOST $DB_PORT

      - name: "Run Migrations"
        run: php artisan migrate

      - name: "Run Passport:install"
        run: php artisan passport:install

      - name: "Run Tests"
        run: php artisan test --env=development
