<?php

namespace Tests\Feature;

use App\Models\Project;
use App\Models\Sprint;
use App\Models\Task;
use App\Models\User;
use App\Models\Workspace;
use Exception;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class GetTaskApiTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected User $user;
    protected Workspace $workspace;
    protected Project $project;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('passport:install');
        $this->artisan('db:seed');

        $endDate = $this->faker->date;
        $beginDate = $this->faker->date('Y-m-d', $endDate);

        $this->user = User::factory()->create();
        $this->workspace = Workspace::factory()->create();
        $this->workspace->users()->attach($this->user->id);
        $this->project = Project::factory()->for($this->workspace)->create();
        $this->sprint = Sprint::factory([
            "begin_date" => $beginDate,
            "end_date" => $endDate
        ])->for($this->project)->create();

        // Create 5 tasks using the factory
        $this->tasks = Task::factory()->for($this->sprint)->times(5)->create();

        $this->unlink_workspace = Workspace::factory()->create();
        $this->unlink_project = Project::factory()->for($this->unlink_workspace)->create();
        $this->unlink_sprint = Sprint::factory()->for($this->unlink_project)->create(); // Make a sprint but don't save it to database

        $this->accessToken = $this->user->createToken('API Token')->accessToken;
        $this->header = ["Authorization" => "Bearer $this->accessToken", "Accept" => "application/json"];
    }

    private function generateUrl($workspaceId, $projectId, $sprintId)
    {
        return "/api/workspaces/{$workspaceId}/projects/{$projectId}/sprints/{$sprintId}/tasks";
    }

    public function testListTasks()
    {
        // Test without any filters or sorting
        $response = $this->get(
            $this->generateUrl($this->workspace->id, $this->project->id, $this->sprint->id),
            $this->header
        );
        $response->assertStatus(200);
        $response->assertJsonFragment($this->tasks[0]->toArray());
    }

    public function testListTasksWithFilters()
    {
        // Test with filters
        $filters = [
            'status' => 'in_progress',
            'priority' => 'high',
            'assigned_to' => 'john@example.com'
        ];
        $response = $this->get('/tasks', $filters);
        $response->assertStatus(200);
        // TODO: Add assertions to verify the response data
    }

    public function testListTasksWithSorting()
    {
        // Test with sorting
        $sorting = [
            'field' => 'deadline',
            'order' => 'asc'
        ];
        $response = $this->get('/tasks', $sorting);
        $response->assertStatus(200);
        // TODO: Add assertions to verify the response data
    }

    public function test_get_task()
    {
        $sprint = Sprint::factory()->for($this->sprint)->create();

        $response = $this->getJson(
            $this->generateUrl($this->workspace->id, $this->project->id, $this->sprint->id),
            $this->header
        );

        $response->assertOk();
        $response->assertJsonFragment($sprint->toArray());
    }

    /**
     * Test get task with missing workspace
     *
     * @return void
     * @throws Exception
     */
    public function test_get_task_with_missing_workspace()
    {
        $missing_workspace = Workspace::factory()->make();

        $response = $this->getJson(
            $this->generateUrl($missing_workspace->id, $this->project->id, $this->sprint->id),
            $this->header
        );

        $response->assertStatus(404);
    }

    public function test_get_task_with_unlinked_project()
    {
        $response = $this->getJson(
            $this->generateUrl($this->workspace->id, $this->unlink_project->id, $this->sprint->id),
            $this->header
        );

        $response->assertStatus(403);
        $this->assertEquals($response->json("message"), "This project does not belong to the specified workspace.");
    }

    public function test_get_task_with_unlinked_sprint()
    {
        $response = $this->getJson(
            $this->generateUrl($this->workspace->id, $this->project->id, $this->unlink_sprint->id),
            $this->header
        );

        $response->assertStatus(403);
        $this->assertEquals($response->json("message"), "This sprint does not belong to the specified project.");
    }
}
